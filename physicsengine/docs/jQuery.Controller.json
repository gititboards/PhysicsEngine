C({"name": "jQuery.Controller", "inherits": "jQuery.Class", "type": "class", "parent": "../jquery/controller/controller.js", "comment": "<p>Controllers organize event handlers using event delegation. \nIf something happens in your application (a user click or a [jQuery.Model|Model] instance being updated), \na controller should respond to it.  </p>\n\n<p>Controllers make your code deterministic, reusable, organized and can tear themselves \ndown auto-magically. Read about [http://jupiterjs.com/news/writing-the-perfect-jquery-plugin \nthe theory behind controller] and \na [http://jupiterjs.com/news/organize-jquery-widgets-with-jquery-controller walkthrough of its features]\non Jupiter's blog.</p>\n\n<h2>Basic Example</h2>\n\n<p>Instead of</p>\n\n<pre><code class='javascript'>$(function(){\n  $('#tabs').click(someCallbackFunction1)\n  $('#tabs .tab').click(someCallbackFunction2)\n  $('#tabs .delete click').click(someCallbackFunction3)\n});</code></pre>\n\n<p>do this</p>\n\n<pre><code class='javascript'>$.Controller('Tabs',{\n  click: function() {...},\n  '.tab click' : function() {...},\n  '.delete click' : function() {...}\n})\n$('#tabs').tabs();</code></pre>\n\n<h2>Tabs Example</h2>\n\n<div class='demo_wrapper' data-demo-src='jquery/controller/controller.html'></div>\n\n<h2>Using Controller</h2>\n\n<p>Controller helps you build and organize jQuery plugins.  It can be used\nto build simple widgets, like a slider, or organize multiple\nwidgets into something greater.</p>\n\n<p>To understand how to use Controller, you need to understand \nthe typical lifecycle of a jQuery widget and how that maps to\ncontroller's functionality:</p>\n\n<h3>A controller class is created.</h3>\n\n<pre><code>$.Controller(\"MyWidget\",\n{\n  defaults :  {\n    message : \"Remove Me\"\n  }\n},\n{\n  init : function(rawEl, rawOptions){ \n    this.element.append(\n       \"&lt;div&gt;\"+this.options.message+\"&lt;/div&gt;\"\n      );\n  },\n  \"div click\" : function(div, ev){ \n    div.remove();\n  }  \n}) \n</code></pre>\n\n<p>This creates a <code>$.fn.my_widget</code> [jquery.controller.plugin jQuery helper function]\nthat can be used to create a new controller instance on an element.</p>\n\n<h3>An instance of controller is created on an element</h3>\n\n<pre><code>$('.thing').my_widget(options) // calls new MyWidget(el, options)\n</code></pre>\n\n<p>This calls <code>new MyWidget(el, options)</code> on \neach <code>'.thing'</code> element.  </p>\n\n<p>When a new [jQuery.Class Class] instance is created, it calls the class's\nprototype setup and init methods. Controller's [jQuery.Controller.prototype.setup setup]\nmethod:</p>\n\n<ul>\n<li>Sets [jQuery.Controller.prototype.element this.element] and adds the controller's name to element's className.</li>\n<li>Merges passed in options with defaults object and sets it as [jQuery.Controller.prototype.options this.options]</li>\n<li>Saves a reference to the controller in <code>$.data</code>.</li>\n<li>[jquery.controller.listening Binds all event handler methods].</li>\n</ul>\n\n<h3>The controller responds to events</h3>\n\n<p>Typically, Controller event handlers are automatically bound.  However, there are\nmultiple ways to [jquery.controller.listening listen to events] with a controller.</p>\n\n<p>Once an event does happen, the callback function is always called with 'this' \nreferencing the controller instance.  This makes it easy to use helper functions and\nsave state on the controller.</p>\n\n<h3>The widget is destroyed</h3>\n\n<p>If the element is removed from the page, the \ncontroller's [jQuery.Controller.prototype.destroy] method is called.\nThis is a great place to put any additional teardown functionality.</p>\n\n<p>You can also teardown a controller programatically like:</p>\n\n<pre><code>$('.thing').my_widget('destroy');\n</code></pre>\n\n<h2>Todos Example</h2>\n\n<p>Lets look at a very basic example - \na list of todos and a button you want to click to create a new todo.\nYour HTML might look like:</p>\n\n<pre><code class='html'>&lt;div id='todos'>\n &lt;ol>\n   &lt;li class=\"todo\">Laundry&lt;/li>\n   &lt;li class=\"todo\">Dishes&lt;/li>\n   &lt;li class=\"todo\">Walk Dog&lt;/li>\n &lt;/ol>\n &lt;a class=\"create\">Create&lt;/a>\n&lt;/div></code></pre>\n\n<p>To add a mousover effect and create todos, your controller might look like:</p>\n\n<pre><code class='javascript'>$.Controller.extend('Todos',{\n  \".todo mouseover\" : function( el, ev ) {\n   el.css(\"backgroundColor\",\"red\")\n  },\n  \".todo mouseout\" : function( el, ev ) {\n   el.css(\"backgroundColor\",\"\")\n  },\n  \".create click\" : function() {\n   this.find(\"ol\").append(\"&lt;li class='todo'>New Todo&lt;/li>\"); \n  }\n})</code></pre>\n\n<p>Now that you've created the controller class, you've must attach the event handlers on the '#todos' div by\ncreating [jQuery.Controller.prototype.setup|a new controller instance].  There are 2 ways of doing this.</p>\n\n<pre><code class='javascript'>//1. Create a new controller directly:\nnew Todos($('#todos'));\n//2. Use jQuery function\n$('#todos').todos();</code></pre>\n\n<h2>Controller Initialization</h2>\n\n<p>It can be extremely useful to add an init method with \nsetup functionality for your widget.</p>\n\n<p>In the following example, I create a controller that when created, will put a message as the content of the element:</p>\n\n<pre><code class='javascript'>$.Controller.extend(\"SpecialController\",\n{\n  init: function( el, message ) {\n     this.element.html(message)\n  }\n})\n$(\".special\").special(\"Hello World\")</code></pre>\n\n<h2>Removing Controllers</h2>\n\n<p>Controller removal is built into jQuery.  So to remove a controller, you just have to remove its element:</p>\n\n<pre><code class='javascript'>$(\".special_controller\").remove()\n$(\"#containsControllers\").html(\"\")</code></pre>\n\n<p>It's important to note that if you use raw DOM methods (<code>innerHTML, removeChild</code>), the controllers won't be destroyed.</p>\n\n<p>If you just want to remove controller functionality, call destroy on the controller instance:</p>\n\n<pre><code class='javascript'>$(\".special_controller\").controller().destroy()</code></pre>\n\n<h2>Accessing Controllers</h2>\n\n<p>Often you need to get a reference to a controller, there are a few ways of doing that.  For the \nfollowing example, we assume there are 2 elements with <code>className=\"special\"</code>.</p>\n\n<pre><code class='javascript'>//creates 2 foo controllers\n$(\".special\").foo()\n\n//creates 2 bar controllers\n$(\".special\").bar()\n\n//gets all controllers on all elements:\n$(\".special\").controllers() //-> [foo, bar, foo, bar]\n\n//gets only foo controllers\n$(\".special\").controllers(FooController) //-> [foo, foo]\n\n//gets all bar controllers\n$(\".special\").controllers(BarController) //-> [bar, bar]\n\n//gets first controller\n$(\".special\").controller() //-> foo\n\n//gets foo controller via data\n$(\".special\").data(\"controllers\")[\"FooController\"] //-> foo</code></pre>\n\n<h2>Calling methods on Controllers</h2>\n\n<p>Once you have a reference to an element, you can call methods on it.  However, Controller has\na few shortcuts:</p>\n\n<pre><code class='javascript'>//creates foo controller\n$(\".special\").foo({name: \"value\"})\n\n//calls FooController.prototype.update\n$(\".special\").foo({name: \"value2\"})\n\n//calls FooController.prototype.bar\n$(\".special\").foo(\"bar\",\"something I want to pass\")</code></pre> ", "tags": ["core"], "plugin": "jquery/controller", "download": "http://jmvcsite.heroku.com/pluginify?plugins[]=jquery/controller/controller.js", "test": "jquery/controller/qunit.html", "children": ["jQuery.Controller.static", "jQuery.Controller.static.init", "jQuery.Controller.static.onDocument", "jQuery.Controller.static._isAction", "jQuery.Controller.static._getAction", "jQuery.Controller.static.processors", "jQuery.Controller.static.processors.subscribe", "jQuery.Controller.static.listensTo", "jQuery.Controller.static.defaults", "jQuery.Controller.prototype", "jQuery.Controller.prototype.setup", "jQuery.Controller.prototype.options", "jQuery.Controller.prototype.called", "jQuery.Controller.prototype.element", "jQuery.Controller.prototype.bind", "jQuery.Controller.prototype.delegate", "jQuery.Controller.prototype.update", "jQuery.Controller.prototype.destroy", "jQuery.Controller.prototype.find", "jQuery.Controller.prototype.publish", "jQuery.Controller.prototype.view"]})