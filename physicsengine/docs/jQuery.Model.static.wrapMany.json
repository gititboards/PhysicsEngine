C({"name": "jQuery.Model.static.wrapMany", "params": {"instancesRawData": {"description": "<p>an array of raw name - value pairs.</p>", "type": "Array", "optional": false, "order": 0, "name": "instancesRawData"}}, "ret": {"description": "<p>a JavaScript array of instances or a [jQuery.Model.List list] of instances\n if the model list plugin has been included.</p>", "type": "Array"}, "type": "function", "parent": "jQuery.Model.static", "comment": "<p>Takes raw data from the server, and returns an array of model instances.\nEach item in the raw array becomes an instance of a model class.</p>\n\n<pre><code class='javascript'>$.Model.extend(\"Recipe\",{\n  helper : function(){\n    return i*i;\n  }\n})\n\nvar recipes = Recipe.wrapMany([{id: 1},{id: 2}])\nrecipes[0].helper() //-> 1</code></pre>\n\n<p>If an array is not passed to wrapMany, it will look in the object's .data\nproperty.  </p>\n\n<p>For example:</p>\n\n<pre><code class='javascript'>var recipes = Recipe.wrapMany({data: [{id: 1},{id: 2}]})\nrecipes[0].helper() //-> 1</code></pre>\n\n<p>Often wrapMany is used with this.callback inside a model's [jQuery.Model.static.findAll findAll]\nmethod like:</p>\n\n<pre><code>findAll : function(params, success, error){\n  $.get('/url',\n        params,\n        this.callback(['wrapMany',success]) )\n}\n</code></pre>\n\n<p>If you are having problems getting your model to callback success correctly,\nmake sure a request is being made (with firebug's net tab).  Also, you \nmight not use this.callback and instead do:</p>\n\n<pre><code>findAll : function(params, success, error){\n  self = this;\n  $.get('/url',\n        params,\n        function(data){\n          var wrapped = self.wrapMany(data);\n          success(data)\n        })\n}\n</code></pre>\n\n<h2>API</h2>", "children": []})