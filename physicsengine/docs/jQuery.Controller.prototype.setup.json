C({"name": "jQuery.Controller.prototype.setup", "params": {"element": {"description": "<p>the element this instance operates on.</p>", "type": "HTMLElement", "optional": false, "order": 0, "name": "element"}, "options": {"description": "<p>option values for the controller.  These get added to\nthis.options.</p>", "type": "Object", "optional": true, "order": 1, "name": "options"}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parent": "jQuery.Controller.prototype", "comment": "<p>Setup is where most of controller's magic happens.  It does the following:</p>\n\n<h3>Sets this.element</h3>\n\n<p>The first parameter passed to new Controller(el, options) is expected to be \nan element.  This gets converted to a jQuery wrapped element and set as\n[jQuery.Controller.prototype.element this.element].</p>\n\n<h3>Adds the controller's name to the element's className.</h3>\n\n<p>Controller adds it's plugin name to the element's className for easier \ndebugging.  For example, if your Controller is named \"Foo.Bar\", it adds\n\"foo_bar\" to the className.</p>\n\n<h3>Saves the controller in $.data</h3>\n\n<p>A reference to the controller instance is saved in $.data.  You can find \ninstances of \"Foo.Bar\" like: </p>\n\n<pre><code>$(\"#el\").data(\"controllers\")['foo_bar'].\n</code></pre>\n\n<h3>Binds event handlers</h3>\n\n<p>Setup does the event binding described in [jquery.controller.listening Listening To Events].</p>\n\n<h2>API</h2>", "children": []})