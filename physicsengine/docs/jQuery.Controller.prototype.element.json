C({"name": "jQuery.Controller.prototype.element", "type": "attribute", "parent": "jQuery.Controller.prototype", "comment": "<p>The controller instance's delegated element. This \nis set by [jQuery.Controller.prototype.setup setup]. It \nis a jQuery wrapped element.</p>\n\n<p>For example, if I add MyWidget to a '#myelement' element like:</p>\n\n<pre><code>$.Controller(\"MyWidget\",{\n  init : function(){\n    this.element.css(\"color\",\"red\")\n  }\n})\n\n$(\"#myelement\").my_widget()\n</code></pre>\n\n<p>MyWidget will turn #myelement's font color red.</p>\n\n<h2>Using a different element.</h2>\n\n<p>Sometimes, you want a different element to be this.element.  A\nvery common example is making progressively enhanced form widgets.</p>\n\n<p>To change this.element, overwrite Controller's setup method like:</p>\n\n<pre><code>$.Controller(\"Combobox\",{\n  setup : function(el, options){\n     this.oldElement = $(el);\n     var newEl = $('&lt;div/&gt;');\n     this.oldElement.wrap(newEl);\n     this._super(newEl, options);\n  },\n  init : function(){\n     this.element //-&gt; the div\n  },\n  \".option click\" : function(){\n    // event handler bound on the div\n  },\n  destroy : function(){\n     var div = this.element; //save reference\n     this._super();\n     div.replaceWith(this.oldElement);\n  }\n}\n</code></pre>", "children": []})